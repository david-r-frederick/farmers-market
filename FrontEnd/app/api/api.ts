//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Api {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    product_GetProduct(id: number, cancelToken?: CancelToken): Promise<Product> {
        let url_ = this.baseUrl + "/api/Product/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProduct_GetProduct(_response);
        });
    }

    protected processProduct_GetProduct(response: AxiosResponse): Promise<Product> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Product.fromJS(resultData200);
            return Promise.resolve<Product>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product>(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    product_CreateProduct(body: Product | undefined, cancelToken?: CancelToken): Promise<void> {
        let url_ = this.baseUrl + "/api/Product";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProduct_CreateProduct(_response);
        });
    }

    protected processProduct_CreateProduct(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    starting_TestConnection( cancelToken?: CancelToken): Promise<ConnectedResponse> {
        let url_ = this.baseUrl + "/Starting/test-connection";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processStarting_TestConnection(_response);
        });
    }

    protected processStarting_TestConnection(response: AxiosResponse): Promise<ConnectedResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ConnectedResponse.fromJS(resultData200);
            return Promise.resolve<ConnectedResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ConnectedResponse>(null as any);
    }

    /**
     * @return OK
     */
    weatherforecast_GetLatestFive( cancelToken?: CancelToken): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast/get-latest-5";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processWeatherforecast_GetLatestFive(_response);
        });
    }

    protected processWeatherforecast_GetLatestFive(response: AxiosResponse): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<WeatherForecast[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class Category implements ICategory {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    name?: string | undefined;
    parentId?: number | undefined;
    parent?: Category;
    children?: Category[] | undefined;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.isActive = true;
            this.isDeleted = false;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : true;
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : false;
            this.deletedBy = _data["deletedBy"];
            this.deletedOn = _data["deletedOn"] ? new Date(_data["deletedOn"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.parentId = _data["parentId"];
            this.parent = _data["parent"] ? Category.fromJS(_data["parent"]) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Category.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["isActive"] = this.isActive;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deletedBy"] = this.deletedBy;
        data["deletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICategory {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    name?: string | undefined;
    parentId?: number | undefined;
    parent?: Category;
    children?: Category[] | undefined;
}

export class CategoryProduct implements ICategoryProduct {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    categoryId?: number;
    category?: Category;
    productId?: number;
    product?: Product;

    constructor(data?: ICategoryProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.isActive = true;
            this.isDeleted = false;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : true;
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : false;
            this.deletedBy = _data["deletedBy"];
            this.deletedOn = _data["deletedOn"] ? new Date(_data["deletedOn"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
            this.categoryId = _data["categoryId"];
            this.category = _data["category"] ? Category.fromJS(_data["category"]) : <any>undefined;
            this.productId = _data["productId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryProduct {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["isActive"] = this.isActive;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deletedBy"] = this.deletedBy;
        data["deletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
        data["categoryId"] = this.categoryId;
        data["category"] = this.category ? this.category.toJSON() : <any>undefined;
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryProduct {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    categoryId?: number;
    category?: Category;
    productId?: number;
    product?: Product;
}

export class ConnectedResponse implements IConnectedResponse {
    connected?: boolean;

    constructor(data?: IConnectedResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.connected = _data["connected"];
        }
    }

    static fromJS(data: any): ConnectedResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ConnectedResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["connected"] = this.connected;
        return data;
    }
}

export interface IConnectedResponse {
    connected?: boolean;
}

export class Product implements IProduct {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    name?: string | undefined;
    description?: string | undefined;
    ingredients?: string | undefined;
    disclaimer?: string | undefined;
    price?: number | undefined;
    allergens?: string | undefined;
    typeId!: number;
    type?: ProductType;
    categoryProducts?: CategoryProduct[] | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.isActive = true;
            this.isDeleted = false;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : true;
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : false;
            this.deletedBy = _data["deletedBy"];
            this.deletedOn = _data["deletedOn"] ? new Date(_data["deletedOn"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.description = _data["description"];
            this.ingredients = _data["ingredients"];
            this.disclaimer = _data["disclaimer"];
            this.price = _data["price"];
            this.allergens = _data["allergens"];
            this.typeId = _data["typeId"];
            this.type = _data["type"] ? ProductType.fromJS(_data["type"]) : <any>undefined;
            if (Array.isArray(_data["categoryProducts"])) {
                this.categoryProducts = [] as any;
                for (let item of _data["categoryProducts"])
                    this.categoryProducts!.push(CategoryProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["isActive"] = this.isActive;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deletedBy"] = this.deletedBy;
        data["deletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["description"] = this.description;
        data["ingredients"] = this.ingredients;
        data["disclaimer"] = this.disclaimer;
        data["price"] = this.price;
        data["allergens"] = this.allergens;
        data["typeId"] = this.typeId;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        if (Array.isArray(this.categoryProducts)) {
            data["categoryProducts"] = [];
            for (let item of this.categoryProducts)
                data["categoryProducts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProduct {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
    name?: string | undefined;
    description?: string | undefined;
    ingredients?: string | undefined;
    disclaimer?: string | undefined;
    price?: number | undefined;
    allergens?: string | undefined;
    typeId: number;
    type?: ProductType;
    categoryProducts?: CategoryProduct[] | undefined;
}

export class ProductType implements IProductType {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;

    constructor(data?: IProductType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.isActive = true;
            this.isDeleted = false;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.isActive = _data["isActive"] !== undefined ? _data["isActive"] : true;
            this.createdBy = _data["createdBy"];
            this.createdOn = _data["createdOn"] ? new Date(_data["createdOn"].toString()) : <any>undefined;
            this.isDeleted = _data["isDeleted"] !== undefined ? _data["isDeleted"] : false;
            this.deletedBy = _data["deletedBy"];
            this.deletedOn = _data["deletedOn"] ? new Date(_data["deletedOn"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedOn = _data["updatedOn"] ? new Date(_data["updatedOn"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductType {
        data = typeof data === 'object' ? data : {};
        let result = new ProductType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["isActive"] = this.isActive;
        data["createdBy"] = this.createdBy;
        data["createdOn"] = this.createdOn ? this.createdOn.toISOString() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["deletedBy"] = this.deletedBy;
        data["deletedOn"] = this.deletedOn ? this.deletedOn.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedOn"] = this.updatedOn ? this.updatedOn.toISOString() : <any>undefined;
        return data;
    }
}

export interface IProductType {
    id?: number;
    key?: string | undefined;
    isActive?: boolean;
    createdBy?: string | undefined;
    createdOn?: Date;
    isDeleted?: boolean;
    deletedBy?: string | undefined;
    deletedOn?: Date | undefined;
    updatedBy?: string | undefined;
    updatedOn?: Date | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}